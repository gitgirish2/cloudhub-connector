/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.ion;

import org.mule.api.MuleEvent;
import org.mule.api.MuleException;
import org.mule.construct.Flow;
import org.mule.tck.junit4.FunctionalTestCase;
import org.mule.tck.junit4.AbstractMuleContextTestCase;

import org.junit.Ignore;
import org.junit.Test;
import org.mule.transport.NullPayload;

import com.mulesoft.ion.client.Application;

import java.util.List;

import static org.junit.Assert.*;

public class IONConnectorTest extends FunctionalTestCase
{
    @Override
    protected String getConfigResources()
    {
        return "mule-config.xml";
    }
    
    @Test
    @Ignore
    public void testStart() throws Exception
    {
        runFlowAndExpect("start", NullPayload.getInstance());
    }

    @Test
    @Ignore
    public void testGetListApplications() throws Exception
    {
        MuleEvent event = runFlow("listApplications");
        
        Object payload = event.getMessage().getPayload();
        assertTrue(payload instanceof List);
    }

    @Test
    @Ignore
    public void testGetApplication() throws Exception
    {
        MuleEvent event = runFlow("getApplication");

        Object payload = event.getMessage().getPayload();
        assertTrue(payload instanceof Application);
    }

    @Test
    @Ignore
    public void testStop() throws Exception
    {
        runFlowAndExpect("stop", NullPayload.getInstance());
    }

    @Test
    public void testCreateNotification() throws Exception
    {
        runFlowAndExpect("createNotification", NullPayload.getInstance());
    }
    
    @Test
    @Ignore
    public void testCreateNotificationFromException() throws Exception
    {
        runFlowAndExpect("createNotificationFromException", NullPayload.getInstance());
    }

    /**
    * Run the flow specified by name and assert equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    */
    protected <T> void runFlowAndExpect(String flowName, T expect) throws Exception
    {
        MuleEvent responseEvent = runFlow(flowName);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    private MuleEvent runFlow(String flowName) throws Exception, MuleException {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = AbstractMuleContextTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);
        return responseEvent;
    }

    /**
    * Run the flow specified by name using the specified payload and assert
    * equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    * @param payload The payload of the input event
    */
    protected <T, U> void runFlowWithPayloadAndExpect(String flowName, T expect, U payload) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = AbstractMuleContextTestCase.getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
     * Retrieve a flow by name from the registry
     *
     * @param name Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name)
    {
        return (Flow) muleContext.getRegistry().lookupFlowConstruct(name);
    }
}
